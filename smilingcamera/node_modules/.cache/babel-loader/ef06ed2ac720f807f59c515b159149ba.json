{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\natha\\\\Documents\\\\ChameleonDeve\\\\Smiling-camera\\\\smilingcamera\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\natha\\\\Documents\\\\ChameleonDeve\\\\Smiling-camera\\\\smilingcamera\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\natha\\\\Documents\\\\ChameleonDeve\\\\Smiling-camera\\\\smilingcamera\\\\src\\\\Components\\\\DashboardAdmin\\\\Pagintableusers.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport TablePagination from '@material-ui/core/TablePagination';\nimport React from 'react';\nimport MaterialTable from 'material-table';\nimport usrs from '../../sample/usrs2.json';\nexport default function MaterialTableDemo() {\n  const _React$useState = React.useState({\n    columns: [{\n      title: 'Username',\n      field: 'username'\n      /*,\r\n      cellStyle: {\r\n      backgroundColor: '#039be5',\r\n      color: '#FFF'\r\n      },\r\n      headerStyle: {\r\n      backgroundColor: '#039be5',\r\n      }*/\n\n    }, {\n      title: 'email',\n      field: 'email'\n    }, //{ title: 'Birth Year', field: 'birthYear', type: 'numeric' },\n    {\n      title: 'Typeuser',\n      field: 'type',\n      lookup: {\n        1: 'Administrador',\n        2: 'Normal'\n      }\n    }, {\n      title: 'Status',\n      field: 'status',\n      lookup: {\n        true: 'Activo',\n        false: 'Inactivo'\n      }\n    }],\n    data: usrs,\n    options: {\n      headerStyle: {\n        backgroundColor: '#01579b',\n        color: '#FFF'\n      }\n    }\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  return React.createElement(MaterialTable, {\n    title: \"Tabla de Usuarios\",\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const data = [...state.data];\n          data.push(newData);\n          setState(_objectSpread({}, state, {\n            data\n          }));\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const data = [...state.data];\n          data[data.indexOf(oldData)] = newData;\n          setState(_objectSpread({}, state, {\n            data\n          }));\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const data = [...state.data];\n          data.splice(data.indexOf(oldData), 1);\n          setState(_objectSpread({}, state, {\n            data\n          }));\n        }, 600);\n      })\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:\\Users\\natha\\Documents\\ChameleonDeve\\Smiling-camera\\smilingcamera\\src\\Components\\DashboardAdmin\\Pagintableusers.js"],"names":["TablePagination","React","MaterialTable","usrs","MaterialTableDemo","useState","columns","title","field","lookup","true","false","data","options","headerStyle","backgroundColor","color","state","setState","onRowAdd","newData","Promise","resolve","setTimeout","push","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":";;;;;;;;AAAA,OAAOA,eAAP,MAA4B,mCAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAAA,0BAChBH,KAAK,CAACI,QAAN,CAAe;AACvCC,IAAAA,OAAO,EAAE,CACP;AAAEC,MAAAA,KAAK,EAAE,UAAT;AAAqBC,MAAAA,KAAK,EAAE;AAAU;;;;;;;;;AAAtC,KADO,EAUP;AAAED,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAVO,EAWP;AACA;AACED,MAAAA,KAAK,EAAE,UADT;AAEEC,MAAAA,KAAK,EAAE,MAFT;AAGEC,MAAAA,MAAM,EAAE;AAAE,WAAG,eAAL;AAAsB,WAAG;AAAzB;AAHV,KAZO,EAiBP;AACEF,MAAAA,KAAK,EAAE,QADT;AAEEC,MAAAA,KAAK,EAAE,QAFT;AAGEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAAE;AAAzB;AAHV,KAjBO,CAD8B;AAwBvCC,IAAAA,IAAI,EAAET,IAxBiC;AAyBvCU,IAAAA,OAAO,EAAE;AACPC,MAAAA,WAAW,EAAE;AACXC,QAAAA,eAAe,EAAE,SADN;AAEXC,QAAAA,KAAK,EAAE;AAFI;AADN;AAzB8B,GAAf,CADgB;AAAA;AAAA,QACnCC,KADmC;AAAA,QAC5BC,QAD4B;;AAkC1C,SACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,mBADR;AAEE,IAAA,OAAO,EAAED,KAAK,CAACX,OAFjB;AAGE,IAAA,IAAI,EAAEW,KAAK,CAACL,IAHd;AAIE,IAAA,QAAQ,EAAE;AACRO,MAAAA,QAAQ,EAAEC,OAAO,IACf,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACrBC,QAAAA,UAAU,CAAC,MAAM;AACfD,UAAAA,OAAO;AACP,gBAAMV,IAAI,GAAG,CAAC,GAAGK,KAAK,CAACL,IAAV,CAAb;AACAA,UAAAA,IAAI,CAACY,IAAL,CAAUJ,OAAV;AACAF,UAAAA,QAAQ,mBAAMD,KAAN;AAAaL,YAAAA;AAAb,aAAR;AACD,SALS,EAKP,GALO,CAAV;AAMD,OAPD,CAFM;AAURa,MAAAA,WAAW,EAAE,CAACL,OAAD,EAAUM,OAAV,KACX,IAAIL,OAAJ,CAAYC,OAAO,IAAI;AACrBC,QAAAA,UAAU,CAAC,MAAM;AACfD,UAAAA,OAAO;AACP,gBAAMV,IAAI,GAAG,CAAC,GAAGK,KAAK,CAACL,IAAV,CAAb;AACAA,UAAAA,IAAI,CAACA,IAAI,CAACe,OAAL,CAAaD,OAAb,CAAD,CAAJ,GAA8BN,OAA9B;AACAF,UAAAA,QAAQ,mBAAMD,KAAN;AAAaL,YAAAA;AAAb,aAAR;AACD,SALS,EAKP,GALO,CAAV;AAMD,OAPD,CAXM;AAmBRgB,MAAAA,WAAW,EAAEF,OAAO,IAClB,IAAIL,OAAJ,CAAYC,OAAO,IAAI;AACrBC,QAAAA,UAAU,CAAC,MAAM;AACfD,UAAAA,OAAO;AACP,gBAAMV,IAAI,GAAG,CAAC,GAAGK,KAAK,CAACL,IAAV,CAAb;AACAA,UAAAA,IAAI,CAACiB,MAAL,CAAYjB,IAAI,CAACe,OAAL,CAAaD,OAAb,CAAZ,EAAmC,CAAnC;AACAR,UAAAA,QAAQ,mBAAMD,KAAN;AAAaL,YAAAA;AAAb,aAAR;AACD,SALS,EAKP,GALO,CAAV;AAMD,OAPD;AApBM,KAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAoCD","sourcesContent":["import TablePagination from '@material-ui/core/TablePagination';\r\nimport React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport usrs from '../../sample/usrs2.json';\r\n\r\nexport default function MaterialTableDemo() {\r\n  const [state, setState] = React.useState({\r\n    columns: [\r\n      { title: 'Username', field: 'username'/*,\r\n        cellStyle: {\r\n          backgroundColor: '#039be5',\r\n          color: '#FFF'\r\n        },\r\n        headerStyle: {\r\n          backgroundColor: '#039be5',\r\n        }*/\r\n      },\r\n      { title: 'email', field: 'email' },\r\n      //{ title: 'Birth Year', field: 'birthYear', type: 'numeric' },\r\n      {\r\n        title: 'Typeuser',\r\n        field: 'type',\r\n        lookup: { 1: 'Administrador', 2: 'Normal' },\r\n      },\r\n      {\r\n        title: 'Status',\r\n        field: 'status',\r\n        lookup: { true: 'Activo', false: 'Inactivo' },\r\n      },\r\n    ],\r\n    data: usrs,\r\n    options: {\r\n      headerStyle: {\r\n        backgroundColor: '#01579b',\r\n        color: '#FFF'\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <MaterialTable\r\n      title=\"Tabla de Usuarios\"\r\n      columns={state.columns}\r\n      data={state.data}\r\n      editable={{\r\n        onRowAdd: newData =>\r\n          new Promise(resolve => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              const data = [...state.data];\r\n              data.push(newData);\r\n              setState({ ...state, data });\r\n            }, 600);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise(resolve => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              const data = [...state.data];\r\n              data[data.indexOf(oldData)] = newData;\r\n              setState({ ...state, data });\r\n            }, 600);\r\n          }),\r\n        onRowDelete: oldData =>\r\n          new Promise(resolve => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              const data = [...state.data];\r\n              data.splice(data.indexOf(oldData), 1);\r\n              setState({ ...state, data });\r\n            }, 600);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}